out_table <- input_csv$OUT_TABLE[i]
comments <- input_csv$COMMENTS[i]
#--Get down to business
#--Connect to the AGOL Web Layer Service URL
service_info <- arc_open(service_url)
layer <- service_info
#--Get the individual layer from the Web Layer (potentially a group layer)
#layer <- get_layer(service_info, 0)
#layer <- get_layer(service_info)
#--Get the data, apply the query if supplied
if(!is.na(query) & trimws(query) != ""){
data <- arc_select(layer, where = query)
}else{
data <- arc_select(layer)
}
#--Create and SF object from our data
sf_object <- st_as_sf(data, geometry=df$geometry, crs = service_info$spatialReference$latestWkid)
#plot(st_geometry(sf_object))
#--Drop problem fields (SE_ANNO_CAD_DATA must be here, it's a list field and throws an error)
drop_fields <- c("SE_ANNO_CAD_DATA","SHAPE__AREA", "SHAPE__LENGTH", "FEATURE_AREA", "FEATURE_PERIMETER",
"FEATURE_AREA_SQM","FEATURE_LENGTH_M")
sf_object <- sf_object[,!(toupper(names(sf_object)) %in% drop_fields)]
#----------------------------------------------------------------------------------------
#--Extract the layer to Geopackage, if specified
#----------------------------------------------------------------------------------------
if(!is.na(out_gpkg)){
print(glue('----Extracting Web Layer to Geopackage {out_gpkg}:{out_table}'))
st_write(sf_object, file.path(out_gpkg), layer = out_table, driver = "GPKG", append = FALSE)
}
#----------------------------------------------------------------------------------------
#--Extract the layer to Postgres, if specified
#----------------------------------------------------------------------------------------
if(!is.na(out_schema)){
print(glue('----Extracting Web Layer to Postgres {out_schema}.{out_table}'))
conn <- dbConnect(RPostgres::Postgres(),
dbname = pg_db,
host = pg_host,
port = pg_port,
user = pg_user,
password = pg_password)
#--Write the layer out to Postgres
st_write(obj = sf_object,
dsn = conn,
Id(schema=out_schema,
table = tolower(out_table)),
append = FALSE, # Set to TRUE to append data to an existing table
delete_layer = TRUE)
#--Add a comment to the table
upd_time <- format(Sys.time(), "%A, %B %d, %Y %H:%M:%S %Z")
dbExecute(conn, glue("COMMENT ON TABLE {out_schema}.{out_table} IS '{comments} \nUpdate Time: {upd_time}';"))
#-Disconnect from Postgres
dbDisconnect(conn)
}
log_row <- data.frame(WebLayer = web_layer, ServiceUrl = service_url,Query=query,OutPGSchema=out_schema,
OutGPKG=out_gpkg,OutTable=out_table)
log_df <- rbind(log_df, log_row)
}
}
#-------------------------------------------------------------------------------
#---Send an email here
#-------------------------------------------------------------------------------
#datestr <- format(Sys.time(), '%Y-%m-%d %H:%M:%OS')
#datestr <- format(Sys.time(), '%A, %B %d, %Y')
datestr <- format(Sys.time(), '%A, %B %d, %Y %H:%M:%S')
#html_output <- htmlTable(log_df, caption = "AGOL Extracted Data")
body <- ""
for (j in 1:nrow(log_df)) {
body <- paste0(body,
"------------------------------------------------------------",
"\n")
row <- log_df[j,]
for (k in colnames(row)){
body <- paste(body, k,":",row[1,k], "\n")
}
body <- paste0(body,
"------------------------------------------------------------",
"\n")
}
subj <- paste0("AGOL Extract:", datestr)
email_sent <- sendEmail(to='mike.fowler@gov.bc.ca',
subject=subj,
body=body,html=FALSE)
#-------------------------------------------------------------------------------
#--Script to Extract ArcGIS Online (AGOL) Web Layers to Postgres and/or Geopackage
#--Mike Fowler
#--Office of the Chief Forester
#--Forest Science, Planning & Practices Branch
#--October 3, 2025
#-------------------------------------------------------------------------------
#install.packages("arcgis")
library(arcgis)
library(arcgisutils)
library(sf)
library(DBI)
library(RPostgres)
library(glue)
library(tidyverse)
#install.packages("htmlTable")
#library(htmlTable)
library(RDCOMClient)
#-------------------------------------------------------------------------------
#--Functions
#-------------------------------------------------------------------------------
getCurrentFileLocation <-  function()
{
this_file <- commandArgs() %>%
tibble::enframe(name = NULL) %>%
tidyr::separate(col=value, into=c("key", "value"), sep="=", fill='right') %>%
dplyr::filter(key == "--file") %>%
dplyr::pull(value)
if (length(this_file)==0)
{
this_file <- rstudioapi::getSourceEditorContext()$path
}
return(dirname(this_file))
}
is_outlook_running <- function() {
# Execute the tasklist command to get a list of running processes
# The /FI "IMAGENAME eq outlook.exe" filters for the Outlook process
command_output <- system('tasklist /FI "IMAGENAME eq outlook.exe"', intern = TRUE)
# Check if "outlook.exe" is present in the command output
# If the output contains "outlook.exe", it means Outlook is running
if (any(grepl("outlook.exe", command_output, ignore.case = TRUE))) {
return(TRUE)
} else {
return(FALSE)
}
}
sendEmail <- function(to,subject,body,html=FALSE){
OutlookOpenAlready <- is_outlook_running()
OutApp <- COMCreate("Outlook.Application")
outMail <- OutApp$CreateItem(0) # 0 represents olMailItem
outMail[["To"]] <- to
outMail[["subject"]] <- subject
if(!html){
print(1)
outMail[["body"]] <- body
}else{
print(2)
outMail[["HTMLBody"]] <- body
}
sent <- outMail$Send()
#--Wait for the message to be sent from the outbox
repeat {
Sys.sleep(0.5)
if (sent) {
break
}
}
#--Quit the application if it was closed when we got here
if(!(OutlookOpenAlready)){
print('Quitting Outlook')
OutApp$Quit()
}
}
#-------------------------------------------------------------------------------
#--Postgres connection information
#-------------------------------------------------------------------------------
pg_db = "prov_data"
pg_host = "localhost"
pg_port = 5432
pg_user = "postgres"
pg_password = "postgres"
#--directory where this script is located
#dir <- dirname(rstudioapi::getSourceEditorContext()$path)
dir <- getCurrentFileLocation()
csv_file <- glue(dir, '\\AGOL_Layers_to_Extract.csv')
wd <- dir
#-------------------------------------------------------------------------------
#--Get a authorization token to our AGOL Portal
#-------------------------------------------------------------------------------
token <- arcgisutils::auth_user(
username = Sys.getenv("ARCGIS_USER"),
password = Sys.getenv("ARCGIS_PASSWORD"),
host = "https://governmentofbc.maps.arcgis.com",
expiration = 60
)
arcgisutils::set_arc_token(token)
#-------------------------------------------------------------------------------
#--Now we loop through the input CSV file
input_csv <- read.csv(csv_file, header=TRUE)
#--Create a dataframe to track what we update.  Will use this after to send an update email
log_df <- data.frame(
WebLayer = c(), ServiceUrl = c(), Query=c(), OutPGSchema=c(),OutGPKG=c(),OutTable=c()
)
for (i in 1:nrow(input_csv)) {
#--Only process the active records
if (input_csv$ACTIVE[i]=='Y'){
#--Pull the values from the CSV into variables
web_layer <- input_csv$WEB_LAYER[i]
#layer_index <- input_csv$LAYER_INDEX[i]
service_url <- input_csv$SERVICE_URL[i]
query <- input_csv$QUERY[i]
out_schema <- input_csv$OUT_PG_SCHEMA[i]
out_gpkg <- input_csv$OUT_GPKG[i]
out_table <- input_csv$OUT_TABLE[i]
comments <- input_csv$COMMENTS[i]
#--Get down to business
#--Connect to the AGOL Web Layer Service URL
service_info <- arc_open(service_url)
layer <- service_info
#--Get the individual layer from the Web Layer (potentially a group layer)
#layer <- get_layer(service_info, 0)
#layer <- get_layer(service_info)
#--Get the data, apply the query if supplied
if(!is.na(query) & trimws(query) != ""){
data <- arc_select(layer, where = query)
}else{
data <- arc_select(layer)
}
#--Create and SF object from our data
sf_object <- st_as_sf(data, geometry=df$geometry, crs = service_info$spatialReference$latestWkid)
#plot(st_geometry(sf_object))
#--Drop problem fields (SE_ANNO_CAD_DATA must be here, it's a list field and throws an error)
drop_fields <- c("SE_ANNO_CAD_DATA","SHAPE__AREA", "SHAPE__LENGTH", "FEATURE_AREA", "FEATURE_PERIMETER",
"FEATURE_AREA_SQM","FEATURE_LENGTH_M")
sf_object <- sf_object[,!(toupper(names(sf_object)) %in% drop_fields)]
#----------------------------------------------------------------------------------------
#--Extract the layer to Geopackage, if specified
#----------------------------------------------------------------------------------------
if(!is.na(out_gpkg)){
print(glue('----Extracting Web Layer to Geopackage {out_gpkg}:{out_table}'))
st_write(sf_object, file.path(out_gpkg), layer = out_table, driver = "GPKG", append = FALSE)
}
#----------------------------------------------------------------------------------------
#--Extract the layer to Postgres, if specified
#----------------------------------------------------------------------------------------
if(!is.na(out_schema)){
print(glue('----Extracting Web Layer to Postgres {out_schema}.{out_table}'))
conn <- dbConnect(RPostgres::Postgres(),
dbname = pg_db,
host = pg_host,
port = pg_port,
user = pg_user,
password = pg_password)
#--Write the layer out to Postgres
st_write(obj = sf_object,
dsn = conn,
Id(schema=out_schema,
table = tolower(out_table)),
append = FALSE, # Set to TRUE to append data to an existing table
delete_layer = TRUE)
#--Add a comment to the table
upd_time <- format(Sys.time(), "%A, %B %d, %Y %H:%M:%S %Z")
dbExecute(conn, glue("COMMENT ON TABLE {out_schema}.{out_table} IS '{comments} \nUpdate Time: {upd_time}';"))
#-Disconnect from Postgres
dbDisconnect(conn)
}
log_row <- data.frame(WebLayer = web_layer, ServiceUrl = service_url,Query=query,OutPGSchema=out_schema,
OutGPKG=out_gpkg,OutTable=out_table)
log_df <- rbind(log_df, log_row)
}
}
#-------------------------------------------------------------------------------
#---Send an email here
#-------------------------------------------------------------------------------
#datestr <- format(Sys.time(), '%Y-%m-%d %H:%M:%OS')
#datestr <- format(Sys.time(), '%A, %B %d, %Y')
datestr <- format(Sys.time(), '%A, %B %d, %Y %H:%M:%S')
#html_output <- htmlTable(log_df, caption = "AGOL Extracted Data")
body <- ""
for (j in 1:nrow(log_df)) {
body <- paste0(body,
"------------------------------------------------------------",
"\n")
row <- log_df[j,]
for (k in colnames(row)){
body <- paste(body, k,":",row[1,k], "\n")
}
body <- paste0(body,
"------------------------------------------------------------",
"\n")
}
subj <- paste0("AGOL Extract:", datestr)
email_sent <- sendEmail(to='mike.fowler@gov.bc.ca',
subject=subj,
body=body,html=FALSE)
#-------------------------------------------------------------------------------
#--Script to Extract ArcGIS Online (AGOL) Web Layers to Postgres and/or Geopackage
#--Mike Fowler
#--Office of the Chief Forester
#--Forest Science, Planning & Practices Branch
#--October 3, 2025
#-------------------------------------------------------------------------------
#install.packages("arcgis")
library(arcgis)
library(arcgisutils)
library(sf)
library(DBI)
library(RPostgres)
library(glue)
library(tidyverse)
#install.packages("htmlTable")
#library(htmlTable)
library(RDCOMClient)
#-------------------------------------------------------------------------------
#--Functions
#-------------------------------------------------------------------------------
getCurrentFileLocation <-  function()
{
this_file <- commandArgs() %>%
tibble::enframe(name = NULL) %>%
tidyr::separate(col=value, into=c("key", "value"), sep="=", fill='right') %>%
dplyr::filter(key == "--file") %>%
dplyr::pull(value)
if (length(this_file)==0)
{
this_file <- rstudioapi::getSourceEditorContext()$path
}
return(dirname(this_file))
}
is_outlook_running <- function() {
# Execute the tasklist command to get a list of running processes
# The /FI "IMAGENAME eq outlook.exe" filters for the Outlook process
command_output <- system('tasklist /FI "IMAGENAME eq outlook.exe"', intern = TRUE)
# Check if "outlook.exe" is present in the command output
# If the output contains "outlook.exe", it means Outlook is running
if (any(grepl("outlook.exe", command_output, ignore.case = TRUE))) {
return(TRUE)
} else {
return(FALSE)
}
}
sendEmail <- function(to,subject,body,html=FALSE){
OutlookOpenAlready <- is_outlook_running()
OutApp <- COMCreate("Outlook.Application")
outMail <- OutApp$CreateItem(0) # 0 represents olMailItem
outMail[["To"]] <- to
outMail[["subject"]] <- subject
if(!html){
outMail[["body"]] <- body
}else{
outMail[["HTMLBody"]] <- body
}
sent <- outMail$Send()
#--Wait for the message to be sent from the outbox
repeat {
Sys.sleep(0.5)
if (sent) {
break
}
}
#--Quit the application if it was closed when we got here
if(!(OutlookOpenAlready)){
print('Quitting Outlook')
OutApp$Quit()
}
}
#-------------------------------------------------------------------------------
#--Postgres connection information
#-------------------------------------------------------------------------------
pg_db = "prov_data"
pg_host = "localhost"
pg_port = 5432
pg_user = "postgres"
pg_password = "postgres"
#--directory where this script is located
#dir <- dirname(rstudioapi::getSourceEditorContext()$path)
dir <- getCurrentFileLocation()
csv_file <- glue(dir, '\\AGOL_Layers_to_Extract.csv')
wd <- dir
#-------------------------------------------------------------------------------
#--Get a authorization token to our AGOL Portal
#-------------------------------------------------------------------------------
token <- arcgisutils::auth_user(
username = Sys.getenv("ARCGIS_USER"),
password = Sys.getenv("ARCGIS_PASSWORD"),
host = "https://governmentofbc.maps.arcgis.com",
expiration = 60
)
arcgisutils::set_arc_token(token)
#-------------------------------------------------------------------------------
#--Now we loop through the input CSV file
input_csv <- read.csv(csv_file, header=TRUE)
#--Create a dataframe to track what we update.  Will use this after to send an update email
log_df <- data.frame(
WebLayer = c(), ServiceUrl = c(), Query=c(), OutPGSchema=c(),OutGPKG=c(),OutTable=c()
)
for (i in 1:nrow(input_csv)) {
#--Only process the active records
if (input_csv$ACTIVE[i]=='Y'){
#--Pull the values from the CSV into variables
web_layer <- input_csv$WEB_LAYER[i]
#layer_index <- input_csv$LAYER_INDEX[i]
service_url <- input_csv$SERVICE_URL[i]
query <- input_csv$QUERY[i]
out_schema <- input_csv$OUT_PG_SCHEMA[i]
out_gpkg <- input_csv$OUT_GPKG[i]
out_table <- input_csv$OUT_TABLE[i]
comments <- input_csv$COMMENTS[i]
#--Get down to business
#--Connect to the AGOL Web Layer Service URL
service_info <- arc_open(service_url)
layer <- service_info
#--Get the individual layer from the Web Layer (potentially a group layer)
#layer <- get_layer(service_info, 0)
#layer <- get_layer(service_info)
#--Get the data, apply the query if supplied
if(!is.na(query) & trimws(query) != ""){
data <- arc_select(layer, where = query)
}else{
data <- arc_select(layer)
}
#--Create and SF object from our data
sf_object <- st_as_sf(data, geometry=df$geometry, crs = service_info$spatialReference$latestWkid)
#plot(st_geometry(sf_object))
#--Drop problem fields (SE_ANNO_CAD_DATA must be here, it's a list field and throws an error)
drop_fields <- c("SE_ANNO_CAD_DATA","SHAPE__AREA", "SHAPE__LENGTH", "FEATURE_AREA", "FEATURE_PERIMETER",
"FEATURE_AREA_SQM","FEATURE_LENGTH_M")
sf_object <- sf_object[,!(toupper(names(sf_object)) %in% drop_fields)]
#----------------------------------------------------------------------------------------
#--Extract the layer to Geopackage, if specified
#----------------------------------------------------------------------------------------
if(!is.na(out_gpkg)){
print(glue('----Extracting Web Layer to Geopackage {out_gpkg}:{out_table}'))
st_write(sf_object, file.path(out_gpkg), layer = out_table, driver = "GPKG", append = FALSE)
}
#----------------------------------------------------------------------------------------
#--Extract the layer to Postgres, if specified
#----------------------------------------------------------------------------------------
if(!is.na(out_schema)){
print(glue('----Extracting Web Layer to Postgres {out_schema}.{out_table}'))
conn <- dbConnect(RPostgres::Postgres(),
dbname = pg_db,
host = pg_host,
port = pg_port,
user = pg_user,
password = pg_password)
#--Write the layer out to Postgres
st_write(obj = sf_object,
dsn = conn,
Id(schema=out_schema,
table = tolower(out_table)),
append = FALSE, # Set to TRUE to append data to an existing table
delete_layer = TRUE)
#--Add a comment to the table
upd_time <- format(Sys.time(), "%A, %B %d, %Y %H:%M:%S %Z")
dbExecute(conn, glue("COMMENT ON TABLE {out_schema}.{out_table} IS '{comments} \nUpdate Time: {upd_time}';"))
#-Disconnect from Postgres
dbDisconnect(conn)
}
log_row <- data.frame(WebLayer = web_layer, ServiceUrl = service_url,Query=query,OutPGSchema=out_schema,
OutGPKG=out_gpkg,OutTable=out_table)
log_df <- rbind(log_df, log_row)
}
}
#-------------------------------------------------------------------------------
#---Send an email here
#-------------------------------------------------------------------------------
#datestr <- format(Sys.time(), '%Y-%m-%d %H:%M:%OS')
#datestr <- format(Sys.time(), '%A, %B %d, %Y')
datestr <- format(Sys.time(), '%A, %B %d, %Y %H:%M:%S')
#html_output <- htmlTable(log_df, caption = "AGOL Extracted Data")
body <- ""
for (j in 1:nrow(log_df)) {
body <- paste0(body,
"------------------------------------------------------------",
"\n")
row <- log_df[j,]
for (k in colnames(row)){
body <- paste(body, k,":",row[1,k], "\n")
}
body <- paste0(body,
"------------------------------------------------------------",
"\n")
}
subj <- paste0("AGOL Extract:", datestr)
email_sent <- sendEmail(to='mike.fowler@gov.bc.ca',
subject=subj,
body=body,html=FALSE)
install_github("mwfowler/AGOL_Extract")
devtools::install_github("mwfowler/AGOL_Extract")
AGOLextract::agolExtract(this, that,the,other)
AGOLextract::sendEmail('mike.fowler@gov.bc.ca','Dud\'s O\'Plenty', 'Your team is going to finally get their act together this week')
RDCOMClient::COMCreate("Outlook.Application")
RDCOMClient::COMCreate()
RDCOMClient::COMCreate("Outlook.Application")
devtools::install_github("mwfowler/AGOL_Extract")
AGOLextract::sendEmail('mike.fowler@gov.bc.ca','Dud\'s O\'Plenty', 'Your team is going to finally get their act together this week')
remove.packages("AGOLextract")
devtools::install_github("mwfowler/AGOL_Extract")
AGOLextract::sendEmail('mike.fowler@gov.bc.ca','Dud\'s O\'Plenty', 'Your team is going to finally get their act together this week')
AGOLextract::isOutlookRunning()
time_start <- as.POSIXct(now())
time_start <- as.POSIXct(datetime::now())
time_start <- as.POSIXct(lubridate::now())
time_end <- as.POSIXct(lubridate::now())
AGOLextract::timeDelta(time_start, time_end)
AGOLextract::getCurrentFileLocation()
remove.packages('AGOLextract')
devtools::install_github("mwfowler/AGOL_Extract")
remove.packages("mwfowler/AGOL_Extract")
remove.packages("AGOL_Extract")
devtools::install_github("mwfowler/AGOL_Extract")
devtools::install_github("mwfowler/AGOL_Extract")
setwd('Z:\\!Workgrp\\Silv Practices\\FOREST HEALTH\\Mike Fowler\\Scripts\\GitHub\\AGOL_Extract')
inCSV <- "AGOL_Layers_to_Extract.csv"
agolPortal <- "https://governmentofbc.maps.arcgis.com"
db <- "prov_data"
host <- "localhost"
port <- "5432"
user <- "postgres"
pass <- "postgres"
email <- "mike.fowler@gov.bc.ca"
time_start <- as.POSIXct("2025-10-09 12:23:08 PDT")
time_end <- as.POSIXct("2025-10-10 12:24:08 PDT")
agolextract::getCurrentFileLocation()
agolextract::isOutlookRunning()
agolextract::sendEmail(email, 'TEST', 'Test Body')
agolextract::timeDelta(time_start, time_end)
agolextract::agolExtract(inCSV,agolPortal,db,host,port,user,pass,email)
remove.packages("agolextract")
